{"version":3,"sources":["store/api/user.js","Views/Others/user.js"],"names":["getUserList","userList","type","GET_USER_LIST","RecordUpdateStatus","recordUpdateStatus","UPDATE_RECORD_STATUS","error","ERROR","clearAll","CLEAR_ALL_USER_DATA","config","headers","saveSingleUser","data","dispath","axios","post","API_URL","then","res","recordSaveStatus","status","message","SAVE_RECORD_STATUS","catch","err","console","log","response","user","sweetAlertHandler","alert","withReactContent","Swal","fire","title","text","handleDelete","id","MySwal","showCloseButton","showCancelButton","willDelete","value","deleteObj","state","find","c","ID","props","deletUser","index","indexOf","splice","setState","finally","isOpen","handleEdit","obj","dataObj","EmployeeNumber","FirstName","MiddleName","LastName","IsUser","isSystemUser","UserName","UserRole","IsAdmin","userObj","isEditUserCode","isSearch","isAdd","window","scrollTo","top","behavior","handleAddUser","e","clearValue","handleIsSystemUser","handleIsNormalUser","handleCloseAddUser","handleFormChange","form","fieldName","innerFieldName","target","name","Password","ConfPassword","Vessel","handleSubmit","a","isEmpty","showLoading","formData","FormData","append","updateSingleUser","location","href","vesselList","columns","selector","omit","cell","row","Button","className","outline","onClick","nextProps","this","setTimeout","reload","getAllUserList","getAllVesselList","map","col","editable","onCell","record","editing","isEditing","Row","Col","Form","Group","as","md","Label","Control","placeholder","style","minWidth","variant","disabled","display","onChange","vesselName","vessel","key","VesselName","xl","noHeader","responsive","theme","paginationPerPage","Component","connect","get","qs","stringify"],"mappings":"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","file":"static/js/15.810a5956.chunk.js","sourcesContent":["import axios from 'axios';\nimport qs from 'querystring';\n\nimport {API_URL} from '../../util/api';\nimport {GET_USER_LIST, SAVE_RECORD_STATUS, UPDATE_RECORD_STATUS,  CLEAR_ALL_USER_DATA, ERROR} from '../actions';\nimport isEmpty from '../../util/isEmpty';\n\nconst APIPath = \"Employee\";\n\nexport const getUserList = userList => ({\n    type: GET_USER_LIST,\n    userList: userList\n});\n\nexport const RecordSaveStatus = recordSaveStatus => ({\n    type: SAVE_RECORD_STATUS,\n    recordSaveStatus,\n});\n\nexport const RecordUpdateStatus = recordUpdateStatus => ({\n    type: UPDATE_RECORD_STATUS,\n    recordUpdateStatus,\n});\n\nexport const error = error => ({\n    type: ERROR,\n    error\n});\n\nexport const clearAll = () => ({\n    type: CLEAR_ALL_USER_DATA\n});\n\nconst config = {\n    headers: {\n        //'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\n\nexport const getAllUserList = (data) => dispath => {\n\n    dispath(getUserList([]));\n\n    axios.get(API_URL + `${APIPath}/GetAllEmployees?${qs.stringify(data)}`, config)\n    .then(res => {\n        console.log(res.data);\n        if(!isEmpty(res.data))\n        {\n            dispath(getUserList(res.data));\n            dispath(clearAll());\n        }\n        else\n        {\n            dispath(error(\"Error fetching list of users\"));\n            dispath(clearAll());\n        }\n    })\n    .catch(err => {\n        if (err.response) {\n            dispath(error(err.response.data.message || 'ERROR'));\n            dispath(clearAll());\n        } else {\n            dispath(error('API Error. Please contact administrator.'));\n            dispath(clearAll());\n        }\n    }); \n\n}\n\nexport const saveSingleUser = (data) => dispath => {\n    axios.post(API_URL + `${APIPath}/AddEmployee`, data, config)\n    .then(res => {\n        if(res.data.status === 0){\n            dispath(RecordSaveStatus(res.data.message)) \n            dispath(clearAll());\n        }\n        else {\n            dispath(error(res.data.message)) \n            dispath(clearAll());\n        }\n    })\n    .catch(err => {\n        console.log(err)\n        if (err.response) {\n            dispath(error(err.response.data.message || 'ERROR'));\n            dispath(clearAll());\n        } else {\n            dispath(error('API Error. Please contact administrator.'));\n            dispath(clearAll());\n        }\n    });  \n}\n\nexport const updateSingleUser = (data) => dispath => {\n    axios.post(API_URL + `${APIPath}/UpdateEmployee`, data, config)\n    .then(res => {\n        if(res.data.status === 0){\n            dispath(RecordUpdateStatus(res.data.message)) \n            dispath(clearAll());\n        }\n        else {\n            dispath(error(res.data.message)) \n            dispath(clearAll());\n        }\n    })\n    .catch(err => {\n        if (err.response) {\n            dispath(error(err.response.data.message || 'ERROR'));\n            dispath(clearAll());\n        } else {\n            dispath(error('API Error. Please contact administrator.'));\n            dispath(clearAll());\n        }\n    });\n\n\n}\n\nexport const deletUser = (data) => dispath => {\n    axios.post(API_URL + `${APIPath}/DeleteEmployee`, data, config)\n        .then(res => {\n            if(res.data == true){\n                dispath(RecordUpdateStatus('User Data Deleted Successfully.')) \n                dispath(clearAll());\n            }\n            else {\n                dispath(error('User Delete Request Error. Please contact administrator.'));\n                dispath(clearAll());\n            }\n        })\n        .catch(err => {\n            if (err.response) {\n                dispath(error(err.response.data.message || 'ERROR'));\n                dispath(clearAll());\n            } else {\n                dispath(error('API Error. Please contact administrator.'));\n                dispath(clearAll());\n            }\n        });   \n}\n\nexport const clearError = () => dispath =>{\n    dispath(error(''));\n}","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {Row, Col, Form, Button} from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport DataTable from 'react-data-table-component';\nimport isEmpty from '../../util/isEmpty';\nimport {getAllUserList, saveSingleUser, updateSingleUser, deletUser} from \"../../store/api/user\";\nimport {getAllVesselList} from \"../../store/api/vessel\";\n\nclass user extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            data: [],\n            isSearch: true,\n            isAdd: false,\n            userObj: '',\n            isEditUserCode: true,\n            isSystemUser: false,\n            vesselList: [],\n        }\n\n        this.columns = [\n            {\n                name: 'ID',\n                selector: 'ID',\n                omit: true\n            },\n            {\n                name: 'Actions',\n                cell: row => {\n                    return (\n                        <>\n                            <Button className='btn btn-sm btn-info mr-1' outline\n                                    onClick={() => this.handleEdit(row.ID)}>\n                                <i className=\"fa fa-edit\"/>\n                            </Button>\n                            <Button className='btn btn-sm btn-dark' outline onClick={() => this.handleDelete(row.ID)}>\n                                <i className=\"fa fa-trash\"/>\n                            </Button>\n                        </>\n\n                    )\n                }\n            },\n            {\n                name: 'User Code',\n                selector: 'EmployeeNumber'\n            },\n            {\n                name: 'Full Name',\n                selector: 'FullName'\n            },\n            {\n                name: 'Username',\n                selector: 'UserName'\n            },\n            {\n                name: 'User Role',\n                cell: row => {\n                    return (\n                        <>{row.IsAdmin === true ? <span className=\"badge badge-info\">Admin</span> :\n                            <span className=\"badge badge-dark\">User</span>}</>\n                    )\n                }\n            }\n        ]\n    }\n\n    sweetAlertHandler = (alert) => {\n        const MySwal = withReactContent(Swal);\n        MySwal.fire({\n            title: alert.title,\n            text: alert.text,\n            type: alert.type\n        });\n    };\n\n    handleDelete = (id) => {\n        const MySwal = withReactContent(Swal);\n\n        MySwal.fire({\n            title: 'Are you sure?',\n            text: 'Once deleted, you will not be able to recover this user!',\n            type: 'warning',\n            showCloseButton: true,\n            showCancelButton: true\n        }).then((willDelete) => {\n            if (willDelete.value) {\n                let deleteObj = this.state.data.find(c => c.ID === id)\n\n                const data = {\n                    ID: id\n                };\n\n                this.props.deletUser(data);\n\n                var index = this.state.data.indexOf(deleteObj);\n\n                if (index > -1) {\n                    this.state.data.splice(index, 1);\n                }\n\n                this.setState({\n                    data: this.state.data\n                })\n            } else {\n                return MySwal.fire('', 'Your user record is safe!', 'info');\n            }\n        }).finally(() => {\n            this.setState({isOpen: true})\n        });\n    }\n\n    handleEdit = (id) => {\n        let obj = this.state.data.find(c => c.ID === id);\n\n        let dataObj = {\n            ID: id,\n            EmployeeNumber: obj.EmployeeNumber,\n            FirstName: obj.FirstName,\n            MiddleName: obj.MiddleName,\n            LastName: obj.LastName\n        }\n\n        if (obj.IsUser) {\n\n            this.setState({\n                isSystemUser: true\n            })\n\n            dataObj = {\n                ...dataObj,\n                UserName: obj.UserName,\n                UserRole: obj.IsAdmin === true ? \"Admin\" : \"User\"\n            }\n        }\n\n        this.setState({\n            userObj: dataObj,\n            isEditUserCode: false\n        });\n\n        this.setState({isSearch: false, isAdd: true})\n\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth',\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!isEmpty(nextProps.userList)) {\n            this.setState({\n                data: nextProps.userList,\n            });\n        }\n        if (!isEmpty(nextProps.recordSaveStatus)) {\n            this.sweetAlertHandler({title: \"Success\", text: nextProps.recordSaveStatus, type: 'success'})\n            //this.clearValue();\n            setTimeout(() => {\n                window.location.reload(false);\n            }, 1800);\n        }\n        if (!isEmpty(nextProps.vesselList)) {\n            this.setState({\n                vesselList: nextProps.vesselList,\n            });\n        }\n        if (!isEmpty(nextProps.recordUpdateStatus)) {\n            this.sweetAlertHandler({title: \"Success\", text: nextProps.recordUpdateStatus, type: 'success'})\n            //this.clearValue();\n            setTimeout(() => {\n                window.location.reload(false);\n            }, 1800);\n        }\n        if (!isEmpty(nextProps.error)) {\n            this.sweetAlertHandler({title: \"Error\", text: nextProps.error, type: 'error'})\n        }\n    }\n\n    componentDidMount() {\n        this.props.getAllUserList();\n        this.props.getAllVesselList();\n    }\n\n    handleAddUser = (e) => {\n        this.clearValue(e);\n        this.setState({isSearch: false, isAdd: true})\n    }\n\n    handleIsSystemUser = (e) => {\n        this.setState({isSystemUser: true})\n    }\n\n    handleIsNormalUser = (e) => {\n        this.setState({isSystemUser: false})\n    }\n\n    handleCloseAddUser = (e) => {\n        this.clearValue(e);\n        this.setState({isSearch: true, isAdd: false, isSystemUser: false})\n    }\n\n    handleFormChange = (e, form, fieldName, innerFieldName) => {\n        try {\n            const {name, value} = e.target;\n            this.setState({\n                [form]: {\n                    ...this.state[form],\n                    [name]: value\n                }\n            })\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    clearValue = (e) => {\n        this.setState({\n            userObj: {\n                ID: '',\n                EmployeeNumber: '',\n                FirstName: '',\n                MiddleName: '',\n                LastName: '',\n                UserName: '',\n                Password: '',\n                ConfPassword: '',\n                UserRole: '',\n                Vessel :''\n            },\n            isEditUserCode: true,\n            isSystemUser: false\n        })\n\n    }\n\n\n\n\n    handleSubmit = async () => {\n\n        if (isEmpty(this.state.userObj.ID)) {\n\n            if (!isEmpty(this.state.userObj.EmployeeNumber)) {\n                Swal.showLoading();\n\n                const formData = new FormData()\n                formData.append('EmployeeNumber', this.state.userObj.EmployeeNumber)\n                formData.append('FirstName', this.state.userObj.FirstName)\n                formData.append('MiddleName', this.state.userObj.MiddleName)\n                formData.append('LastName', this.state.userObj.LastName)\n                formData.append('IsUser', this.state.isSystemUser ? true : false)\n                formData.append('IsLocked', false)\n                formData.append('IsActive', true)\n                formData.append('Vessel', this.state.userObj.Vessel)\n\n                if (this.state.isSystemUser && !isEmpty(this.state.userObj.Password) && !isEmpty(this.state.userObj.ConfPassword)) {\n                    formData.append('UserName', this.state.userObj.UserName)\n                    formData.append('Password', this.state.userObj.Password)\n                    formData.append('IsAdmin', this.state.userObj.UserRole === \"Admin\" ? true : false)\n\n                    if (this.state.userObj.Password === this.state.userObj.ConfPassword) {\n                        this.props.saveSingleUser(formData);\n                    } else {\n                        this.sweetAlertHandler({\n                            title: \"Error\",\n                            text: 'Confirm password not match with password',\n                            type: 'error'\n                        })\n                    }\n                } else if (this.state.isSystemUser) {\n                    this.sweetAlertHandler({\n                        title: \"Error\",\n                        text: 'Please enter password and confirm password',\n                        type: 'error'\n                    })\n                } else {\n                    this.props.saveSingleUser(formData);\n                }\n\n            } else {\n                this.sweetAlertHandler({title: \"Error\", text: 'Please fill all required fileds', type: 'error'})\n            }\n\n        } else {\n            Swal.showLoading();\n\n            const formData = new FormData()\n\n            formData.append('ID', this.state.userObj.ID)\n            formData.append('EmployeeNumber', this.state.userObj.EmployeeNumber)\n            formData.append('FirstName', this.state.userObj.FirstName)\n            formData.append('MiddleName', this.state.userObj.MiddleName)\n            formData.append('LastName', this.state.userObj.LastName)\n            formData.append('IsUser', this.state.isSystemUser ? true : false)\n            formData.append('IsLocked', false)\n            formData.append('IsActive', true)\n            formData.append('Vessel', this.state.userObj.Vessel)\n\n            if (this.state.isSystemUser) {\n                formData.append('UserName', this.state.userObj.UserName)\n                formData.append('IsAdmin', this.state.userObj.UserRole === \"Admin\" ? true : false)\n                if (!isEmpty(this.state.userObj.Password) && !isEmpty(this.state.userObj.ConfPassword)) {\n                    formData.append('Password', this.state.userObj.Password)\n\n                    if (this.state.userObj.Password === this.state.userObj.ConfPassword) {\n                        this.props.updateSingleUser(formData);\n                    } else {\n                        this.sweetAlertHandler({\n                            title: \"Error\",\n                            text: 'Confirm password not match with password',\n                            type: 'error'\n                        })\n                    }\n                } else {\n                    this.props.updateSingleUser(formData);\n                }\n            } else {\n                this.props.updateSingleUser(formData);\n            }\n        }\n\n        window.location.href('https://shipstab-build.vercel.app/able-pro/react/default/others/user')\n\n    }\n\n\n    render() {\n        const {isSearch, isAdd, userObj, isEditUserCode, isSystemUser , vesselList , Vessel} = this.state;\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editing: this.isEditing(record)\n                })\n            }\n        })\n\n\n        return (\n            <Aux>\n                <Row>\n                    <Col>\n                        {isSearch &&\n                            <Card title='Search User'>\n                                <Form.Row>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>User Code</Form.Label>\n                                        <Form.Control type=\"text\" id=\"EmployeeNumber\" placeholder=\"User Code\"/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>User Name</Form.Label>\n                                        <Form.Control type=\"text\" id=\"UserName\" placeholder=\"User Name\"/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>Full Name</Form.Label>\n                                        <Form.Control type=\"text\" id=\"FullName\" placeholder=\"Full Name\"/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>User Role</Form.Label>\n                                        <Form.Control type=\"text\" id=\"IsAdmin\" placeholder=\"User Role\"/>\n                                    </Form.Group>\n                                </Form.Row>\n                                <Form.Row>\n                                    <Form.Group as={Col} md=\"12\">\n                                        <center>\n                                            <Button type={\"button\"} style={{minWidth: '200px'}} variant={'info'}\n                                                    className={'m-3'} disabled>Search</Button>\n                                            <Button style={{minWidth: '200px'}} variant={'dark'} className={'m-3'}\n                                                    disabled>Clear</Button>\n                                        </center>\n                                    </Form.Group>\n                                </Form.Row>\n                            </Card>\n                        }\n                        {isAdd &&\n                            <Card title='Manage User'>\n                                <Form.Row>\n                                    <Form.Group style={{display: 'none'}}>\n                                        <Form.Label>ID</Form.Label>\n                                        <Form.Control type=\"text\" id=\"ID\" name=\"ID\"\n                                                      onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                      value={userObj.ID}/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>User Code</Form.Label>\n                                        <Form.Control type=\"text\" id=\"EmployeeNumber\" name=\"EmployeeNumber\"\n                                                      placeholder=\"User Code\"\n                                                      onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                      value={userObj.EmployeeNumber} disabled={!isEditUserCode}/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>First Name</Form.Label>\n                                        <Form.Control type=\"text\" id=\"FirstName\" name=\"FirstName\"\n                                                      placeholder=\"First Name\"\n                                                      onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                      value={userObj.FirstName}/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>Middle Name</Form.Label>\n                                        <Form.Control type=\"text\" id=\"MiddleName\" name=\"MiddleName\"\n                                                      placeholder=\"Middle Name\"\n                                                      onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                      value={userObj.MiddleName}/>\n                                    </Form.Group>\n                                    <Form.Group as={Col} md=\"3\">\n                                        <Form.Label>Last Name</Form.Label>\n                                        <Form.Control type=\"text\" id=\"LastName\" name=\"LastName\" placeholder=\"Last Name\"\n                                                      onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                      value={userObj.LastName}/>\n                                    </Form.Group>\n                                    {!isSystemUser &&\n                                        <Button className='btn btn-sm btn-info'\n                                                onClick={(e) => this.handleIsSystemUser(e)}>Is System User</Button>\n                                    }\n                                    {isSystemUser &&\n                                        <Button className='btn btn-sm btn-dark'\n                                                onClick={(e) => this.handleIsNormalUser(e)}>Is Normal User</Button>\n                                    }\n                                </Form.Row>\n                                {isSystemUser &&\n                                    <>\n                                        <hr/>\n                                        <Form.Row>\n                                            <Form.Group as={Col} md=\"3\">\n                                                <Form.Label>Username</Form.Label>\n                                                <Form.Control type=\"text\" id=\"UserName\" name=\"UserName\"\n                                                              placeholder=\"Username\"\n                                                              onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                              value={userObj.UserName}/>\n                                            </Form.Group>\n                                            <Form.Group as={Col} md=\"3\">\n                                                <Form.Label>Password</Form.Label>\n                                                <Form.Control type=\"password\" id=\"Password\" name=\"Password\"\n                                                              placeholder=\"Password\"\n                                                              onChange={(e) => this.handleFormChange(e, 'userObj')}/>\n                                            </Form.Group>\n                                            <Form.Group as={Col} md=\"3\">\n                                                <Form.Label>Confirm Password</Form.Label>\n                                                <Form.Control type=\"password\" id=\"ConfPassword\" name=\"ConfPassword\"\n                                                              placeholder=\"Confirm Password\"\n                                                              onChange={(e) => this.handleFormChange(e, 'userObj')}/>\n                                            </Form.Group>\n                                            <Form.Group as={Col} md=\"3\">\n                                                <Form.Label>User Role</Form.Label>\n                                                <select className=\"form-control add_task_todo\"\n                                                        onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                        name=\"UserRole\" id=\"UserRole\" value={userObj.UserRole}>\n                                                    <option value=''>Select User Role</option>\n                                                    <option value='Admin'>Admin</option>\n                                                    <option value='User'>User</option>\n                                                </select>\n                                            </Form.Group>\n                                            <Form.Group as={Col} md=\"3\">\n                                                <Form.Label>Vessel</Form.Label>\n                                                <select className=\"form-control add_task_todo\"\n                                                        onChange={(e) => this.handleFormChange(e, 'userObj')}\n                                                        name=\"Vessel\" id=\"Vessel\" value={userObj.vesselName}>\n                                                    {/*onClick={this.handleLoadVessel}*/}\n                                                    <option value=''>Select Vessel Name</option>\n                                                    {!isEmpty(vesselList) && vesselList.map((vessel, key) => {\n                                                        return <option key={key}\n                                                                       value={vessel.ID}>{vessel.VesselName}</option>;\n                                                    })}\n                                                </select>\n                                            </Form.Group>\n                                        </Form.Row>\n                                    </>\n                                }\n                                <Form.Row>\n                                    <Form.Group as={Col} md=\"12\">\n                                        <center>\n                                            <Button type={\"button\"} style={{minWidth: '200px'}} variant={'info'}\n                                                    className={'m-3'} onClick={this.handleSubmit}>Save</Button>\n                                            <Button style={{minWidth: '200px'}} variant={'dark'} className={'m-3'}\n                                                    onClick={(e) => this.handleCloseAddUser(e)}>Cancel</Button>\n                                        </center>\n                                    </Form.Group>\n                                </Form.Row>\n                            </Card>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xl={12}>\n                        <nav className=\"navbar m-b-10 p-10\">\n                            <ul className=\"nav\">\n                                <li className=\"nav-item f-text active\">\n                                </li>\n                                <li className=\"nav-item f-text active\">\n\n                                </li>\n                            </ul>\n                            <div className=\"nav-item nav-grid f-view\">\n                                <Button type={\"button\"} style={{minWidth: '200px'}} variant={'info'}\n                                        onClick={(e) => this.handleAddUser(e)}>Add User</Button>\n                            </div>\n                        </nav>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Card title='Users List'>\n                            <DataTable\n                                noHeader\n                                responsive\n                                theme=\"default\"\n                                {...this.state}\n                                columns={columns}\n                                paginationPerPage={2}\n                                className='react-dataTable'\n                                //sortIcon={<ChevronDown size={10} />}\n                                //paginationDefaultPage={this.state.currentPage + 1}\n                                data={this.state.data}\n                            />\n                        </Card>\n\n                    </Col>\n                </Row>\n            </Aux>\n        );\n    }\n}\n\n\n\nconst mapStateToProps = state => ({\n    userList: state.userList,\n    recordSaveStatus: state.recordSaveStatus,\n    recordUpdateStatus: state.recordUpdateStatus,\n    error: state.error,\n    vesselList: state.vesselList,\n});\n\nconst mapDispatchToProps = dispath => ({\n    getAllUserList: (userList) => dispath(getAllUserList(userList)),\n    saveSingleUser: (userObj) => dispath(saveSingleUser(userObj)),\n    updateSingleUser: (userObj) => dispath(updateSingleUser(userObj)),\n    deletUser: (data) => dispath(deletUser(data)),\n    getAllVesselList: (vesselList) => dispath(getAllVesselList(vesselList)),\n\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(user);"],"sourceRoot":""}