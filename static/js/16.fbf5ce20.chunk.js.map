{"version":3,"sources":["Views/Others/vessel.js"],"names":["vessel","sweetAlertHandler","alert","withReactContent","Swal","fire","title","text","type","handleDelete","id","MySwal","showCloseButton","showCancelButton","then","willDelete","value","deleteObj","state","data","find","c","ID","props","deletVessel","index","indexOf","splice","setState","finally","isOpen","handleEdit","obj","dataObj","vesselCode","VesselCode","vesselName","VesselName","vesselObj","isEditVesselCode","isSearch","isAdd","window","scrollTo","top","behavior","handleAddVessel","e","clearValue","handleCloseAddVessel","handleFormChange","form","fieldName","innerFieldName","target","name","console","log","files","err","handleSubmit","a","loadingConditionFile","LoadingConditionFile","ConfigFile","isEmpty","configFile","showLoading","formData","FormData","append","saveSingleVessel","updateSingleVessel","columns","selector","omit","cell","row","className","outline","onClick","nextProps","vesselList","this","recordSaveStatus","status","message","setTimeout","location","reload","recordUpdateStatus","error","getAllVesselList","map","col","editable","onCell","record","editing","isEditing","Row","Group","as","Col","md","Label","Control","placeholder","style","minWidth","variant","disabled","display","onChange","accept","xl","noHeader","responsive","theme","paginationPerPage","Component","connect","dispath"],"mappings":"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","file":"static/js/16.fbf5ce20.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from \"react-redux\";\nimport {Row, Col, Form, Button} from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport DataTable from 'react-data-table-component';\nimport isEmpty from '../../util/isEmpty';\nimport { getAllVesselList, saveSingleVessel, updateSingleVessel, deletVessel } from \"../../store/api/vessel\";\nclass vessel extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            data: [],\n            isSearch: true,\n            isAdd: false,\n            vesselObj: '',\n            isEditVesselCode: true\n        }\n\n        this.columns = [\n            {\n                name: 'ID',\n                selector: 'ID',\n                omit: true\n            },\n            {\n                name: 'Actions',\n                cell: row => {\n                  return (\n                      <>\n                        <Button className='btn btn-sm btn-info mr-1' outline onClick={() => this.handleEdit(row.ID)}>\n                            <i className=\"fa fa-edit\" />\n                        </Button>\n                        <Button className='btn btn-sm btn-dark' outline onClick={() => this.handleDelete(row.ID)}>\n                            <i className=\"fa fa-trash\" />\n                        </Button>\n                      </>\n                    \n                  )\n                }\n            },\n            {\n                name: 'Vessel Code',\n                selector: 'VesselCode'\n            },\n            {\n                name: 'Vessel Name',\n                selector: 'VesselName'\n            }\n        ]\n    }\n\n    sweetAlertHandler = (alert) => {\n        const MySwal = withReactContent(Swal);\n        MySwal.fire({\n            title: alert.title,\n            text: alert.text,\n            type: alert.type\n        });\n    };\n    \n    handleDelete = (id) => {\n        const MySwal = withReactContent(Swal);\n\n        MySwal.fire({\n            title: 'Are you sure?',\n            text: 'Once deleted, you will not be able to recover this Vessel!',\n            type: 'warning',\n            showCloseButton: true,\n            showCancelButton: true\n        }).then((willDelete) => {\n            if (willDelete.value) {\n                let deleteObj = this.state.data.find(c => c.ID === id)\n\n                const data = {\n                    ID: id\n                };\n\n                this.props.deletVessel(data);\n\n                var index = this.state.data.indexOf(deleteObj);\n\n                if (index > -1) { \n                    this.state.data.splice(index, 1);\n                }\n\n                this.setState({\n                    data: this.state.data\n                })\n            } else {\n                return MySwal.fire('', 'Your Vessel record is safe!', 'error');\n            }\n        }).finally(() => {\n            this.setState({ isOpen: true })\n        });\n    }\n\n    handleEdit = (id) => {\n        let obj = this.state.data.find(c => c.ID === id);\n\n        const dataObj = {\n            id: id,\n            vesselCode: obj.VesselCode,\n            vesselName: obj.VesselName\n        }\n\n        this.setState({\n            vesselObj: dataObj,\n            isEditVesselCode: false\n        });\n\n        this.setState({ isSearch: false, isAdd: true })\n\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth',\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!isEmpty(nextProps.vesselList)) {\n            this.setState({\n                data: nextProps.vesselList,\n            });\n        }\n        if (!isEmpty(nextProps.recordSaveStatus)) {\n\n            if(nextProps.recordSaveStatus.status === 999) {\n                this.sweetAlertHandler({ title: \"Error\", text: nextProps.recordSaveStatus.message, type: 'error' })\n            }\n            else \n            {\n                this.sweetAlertHandler({ title: \"Success\", text: nextProps.recordSaveStatus, type: 'success' })\n                //this.clearValue();\n                setTimeout(() => {\n                    window.location.reload(false);\n                }, 1800);\n            }\n        }\n        if (!isEmpty(nextProps.recordUpdateStatus)) {\n            if(nextProps.recordUpdateStatus.status === 999) {\n                this.sweetAlertHandler({ title: \"Error\", text: nextProps.recordUpdateStatus.message, type: 'error' })\n            }\n            else \n            {\n                this.sweetAlertHandler({ title: \"Success\", text: nextProps.recordUpdateStatus, type: 'success' })\n                //this.clearValue();\n                setTimeout(() => {\n                    window.location.reload(false);\n                }, 1800);\n            }\n        }\n        if (!isEmpty(nextProps.error)) {\n            this.sweetAlertHandler({ title: \"Error\", text: nextProps.error, type: 'error' })\n        }\n    }\n\n    componentDidMount() {\n        this.props.getAllVesselList();\n    }\n\n    handleAddVessel = (e) => {\n        this.clearValue(e);\n        this.setState({ isSearch: false, isAdd: true })\n    }\n\n    handleCloseAddVessel = (e) => {\n        this.clearValue(e);\n        this.setState({ isSearch: true, isAdd: false })\n    }\n\n    handleFormChange = (e, form, fieldName, innerFieldName) => {\n        try {\n            const { name, value } = e.target;\n            if(name == 'configFile' || name == 'loadingConditionFile'){\n\n                console.log(e.target.files)\n                this.setState({\n                    [form]: {\n                        ...this.state[form],\n                        [name]: e.target.files[0]\n                    }\n                })\n            }\n            else{\n            this.setState({\n                [form]: {\n                    ...this.state[form],\n                    [name]: value\n                }\n                })\n            }\n        }\n        catch (err) {\n            console.log(err);\n        }\n    }\n\n    clearValue = (e) => {\n        this.setState({\n            vesselObj: {\n                id: '',\n                vesselName: '',\n                vesselCode: '',\n            },\n            isEditVesselCode: true\n            })\n    \n    }\n\n\n    handleSubmit = async () => {\n\n        console.log(this.state.vesselObj.loadingConditionFile)\n        let LoadingConditionFile = '';\n        let ConfigFile = '';\n\n        if(this.state.vesselObj.loadingConditionFile != null){\n            if(!isEmpty(this.state.vesselObj.loadingConditionFile.name)){\n                LoadingConditionFile = this.state.vesselObj.loadingConditionFile\n            }\n        }\n         \n        if(this.state.vesselObj.configFile != null){\n            if(!isEmpty(this.state.vesselObj.configFile.name)) {\n                ConfigFile = this.state.vesselObj.configFile            \n            }\n\n        }\n\n        if(isEmpty(this.state.vesselObj.id)){\n\n            if(!isEmpty(this.state.vesselObj.vesselName) && !isEmpty(this.state.vesselObj.vesselCode) && this.state.vesselObj.loadingConditionFile != null && this.state.vesselObj.configFile != null)\n            {\n                Swal.showLoading();\n\n                const formData = new FormData()\n                formData.append('vesselName', this.state.vesselObj.vesselName)\n                formData.append('vesselCode', this.state.vesselObj.vesselCode)\n                formData.append('configFile', ConfigFile)\n                formData.append('loadingConditionFile', LoadingConditionFile)\n    \n                this.props.saveSingleVessel(formData);\n            }\n            else\n            {\n                this.sweetAlertHandler({ title: \"Error\", text: 'Please fill all required fileds', type: 'error' })\n            }\n\n        }\n        else{\n                Swal.showLoading();\n\n                const formData = new FormData()\n\n                formData.append('id', this.state.vesselObj.id)\n                formData.append('vesselName', this.state.vesselObj.vesselName)\n                formData.append('vesselCode', this.state.vesselObj.vesselCode)\n                formData.append('configFile', ConfigFile)\n                formData.append('loadingConditionFile', LoadingConditionFile)\n\n                this.props.updateSingleVessel(formData);\n        }\n    }\n\n    render() {\n        const { isSearch, isAdd, vesselObj, isEditVesselCode } = this.state;\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    editing: this.isEditing(record)\n                })\n            }\n        })\n\n        return (\n            <Aux>\n                <Row>\n                    <Col>\n                        {isSearch &&\n                        <Card title='Search Vessel'>\n                            <Form.Row>\n                                <Form.Group as={Col} md=\"6\">\n                                    <Form.Label>Vessel Code</Form.Label>\n                                    <Form.Control type=\"text\" id=\"vesselCode\" placeholder=\"Vessel Code\" />\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"6\">\n                                    <Form.Label>Vessel Name</Form.Label>\n                                    <Form.Control type=\"text\" id=\"vesselName\" placeholder=\"Vessel Name\" />\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} md=\"12\">\n                                    <center>\n                                        <Button type={\"button\"} style={{ minWidth: '200px' }} variant={'info'} className={'m-3'} disabled>Search</Button>\n                                        <Button style={{ minWidth: '200px' }} variant={'dark'} className={'m-3'} disabled>Clear</Button>\n                                    </center>\n                                </Form.Group>\n                            </Form.Row>\n                        </Card>\n                        }\n                        {isAdd &&\n                        <Card title='Manage Vessel'>\n                            <Form.Row>\n                                <Form.Group style={{display:'none'}}>\n                                                <Form.Label>ID</Form.Label>\n                                                <Form.Control type=\"text\" id=\"id\" name=\"id\" onChange={(e) => this.handleFormChange(e, 'vesselObj')} value={vesselObj.id}/>\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"3\">\n                                    <Form.Label>Vessel Code</Form.Label>\n                                    <Form.Control type=\"text\" id=\"vesselCode\" name=\"vesselCode\" placeholder=\"Vessel Code\" onChange={(e) => this.handleFormChange(e, 'vesselObj')} value={vesselObj.vesselCode} disabled={!isEditVesselCode} />\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"3\">\n                                    <Form.Label>Vessel Name</Form.Label>\n                                    <Form.Control type=\"text\" id=\"vesselName\" name=\"vesselName\" placeholder=\"Vessel Name\" onChange={(e) => this.handleFormChange(e, 'vesselObj')} value={vesselObj.vesselName}/>\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"3\">\n                                    <Form.Label>Upload Config File</Form.Label>\n                                    <Form.Control\n                                        type=\"file\"\n                                        accept=\".geo\"\n                                        id=\"configFile\"\n                                        name=\"configFile\"\n                                        onChange={(e) => this.handleFormChange(e, 'vesselObj')}\n                                    />\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"3\">\n                                    <Form.Label>Upload Loading Condition File</Form.Label>\n                                    <Form.Control\n                                        type=\"file\"\n                                        accept=\".lod\"\n                                        id=\"loadingConditionFile\"\n                                        name=\"loadingConditionFile\"\n                                        onChange={(e) => this.handleFormChange(e, 'vesselObj')}\n                                    />\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} md=\"12\">\n                                    <center>\n                                        <Button type={\"button\"} style={{ minWidth: '200px' }} variant={'info'} className={'m-3'} onClick={this.handleSubmit}>Save</Button>\n                                        <Button style={{ minWidth: '200px' }} variant={'dark'} className={'m-3'} onClick={(e) => this.handleCloseAddVessel(e)}>Cancel</Button>\n                                    </center>\n                                </Form.Group>\n                            </Form.Row>\n                        </Card>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xl={12}>\n                        <nav className=\"navbar m-b-10 p-10\">\n                            <ul className=\"nav\">\n                                <li className=\"nav-item f-text active\">\n                                </li>\n                                <li className=\"nav-item f-text active\">\n\n                                </li>\n                            </ul>\n                            <div className=\"nav-item nav-grid f-view\">\n                                <Button type={\"button\"} style={{ minWidth: '200px' }} variant={'info'} onClick={(e) => this.handleAddVessel(e)}>Add Vessel</Button>\n                            </div>\n                        </nav>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Card title='Vessels List'>\n                            <DataTable\n                                noHeader\n                                responsive\n                                theme=\"default\"\n                                {...this.state}\n                                columns={columns}\n                                paginationPerPage={2}\n                                className='react-dataTable'\n                                //sortIcon={<ChevronDown size={10} />}\n                                //paginationDefaultPage={this.state.currentPage + 1}\n                                data={this.state.data}\n                            />\n                        </Card>\n                        \n                    </Col>\n                </Row>\n            </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    vesselList: state.vesselList,\n    recordSaveStatus: state.recordSaveStatus,\n    recordUpdateStatus: state.recordUpdateStatus,\n    error: state.error\n});\n\nconst mapDispatchToProps = dispath => ({\n    getAllVesselList: (vesselList) => dispath(getAllVesselList(vesselList)),\n    saveSingleVessel: (vesselObj) => dispath(saveSingleVessel(vesselObj)),\n    updateSingleVessel: (vesselObj) => dispath(updateSingleVessel(vesselObj)),\n    deletVessel: (data) => dispath(deletVessel(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps) (vessel);"],"sourceRoot":""}